<?xml version="1.0"?>
<!--
/*
 * Copyright 2015 Jens Dietrich
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */ 
 -->

<project name="guery" default="release">
	<property name="name" value="guery" />
	<property name="version" value="1.4" />
	<property name="debug" value="on" />
	<property name="src" value="src" />
	<property name="core.src" value="${src}/core" />
	<property name="jung.src" value="${src}/jung" />
	<property name="blueprints.src" value="${src}/blueprints" />
	<property name="tests.src" value="${src}/tests" />
	<property name="docs" value="docs" />
	<property name="lib" value="lib" />
	<property name="config" value="misc" />
	<property name="build" value="build" />
	<property name="classes" value="${build}/classes" />
	<property name="tools" value="tools" />
	<property name="junitreports" value="${build}/junit-reports" />
	<property name="core.classes" value="${classes}/core" />
	<property name="tests.classes" value="${classes}/tests" />
	<property name="jung.classes" value="${classes}/jung" />
	<property name="blueprints.classes" value="${classes}/blueprints" />
	<property name="build.lib" value="${build}/lib-tmp" />
	<property name="requiredlibs" value="${build}/lib-dep" />
	<property name="tmp" value="${build}/tmp" />
	<property name="javadoc" value="${build}/javadoc" />
	<property name="api.jar" value="${build.lib}/${name}-api-${version}" />
	<property name="io.jar" value="${build.lib}/${name}-io-${version}" />
	<property name="impl.jar" value="${build.lib}/${name}-impl-${version}" />
	<property name="tests.jar" value="${build.lib}/${name}-tests-${version}" />
	<property name="jung.jar" value="${build.lib}/${name}-jung-${version}" />
	<property name="blueprints.jar" value="${build.lib}/${name}-blueprints-${version}" />

	<path id="build.classpath">
		<fileset dir="${lib}">
			<include name="**/*.jar" />
		</fileset>
		<pathelement location="${core.classes}"/>
		<pathelement location="${jung.classes}"/>
		<pathelement location="${blueprints.classes}"/>
		<pathelement location="${tests.classes}"/>
	</path>
	<property name="build" value="./build" />
	<property name="classes" value="${build}/classes" />
	<!-- Prepare the output directories-->
	<target name="prepare" description="Prepare the build directories">
		<mkdir dir="${build}" />
		<mkdir dir="${classes}" />
		<mkdir dir="${core.classes}" />
		<mkdir dir="${jung.classes}" />
		<mkdir dir="${tests.classes}" />
		<mkdir dir="${blueprints.classes}" />
		<mkdir dir="${javadoc}" />
		<mkdir dir="${build.lib}" />
		<mkdir dir="${tmp}" />
		<mkdir dir="${junitreports}" />
		<mkdir dir="${requiredlibs}" />
	</target>
	<!-- Compiles the classes -->
	<target name="compile" depends="prepare" description="Compile the whole project">
		<javac destdir="${core.classes}" debug="${debug}" deprecation="on" optimize="off" srcdir="${core.src}" classpathref="build.classpath" />	
		<javac destdir="${jung.classes}" debug="${debug}" deprecation="on" optimize="off" srcdir="${jung.src}" classpathref="build.classpath" />
		<javac destdir="${blueprints.classes}" debug="${debug}" deprecation="on" optimize="off" srcdir="${blueprints.src}" classpathref="build.classpath" />
		<javac destdir="${tests.classes}" debug="${debug}" deprecation="on" optimize="off" srcdir="${tests.src}" classpathref="build.classpath" />
		<!-- tests have datasets as resources, copy them as well-->
		<copy todir="${tests.classes}">
		    <fileset dir="${tests.src}">
		      	<exclude name="**/*.java"/>
		    </fileset>
		</copy>
	</target>

	<!-- Tests the project, using JUnit tests -->
	<target name="test" depends="compile" description="Tests the project">
		<!-- fork has to be true, otherwise the generated classes will not be loaded -->
		<junit printsummary="yes" haltonfailure="no" fork="yes">
			<jvmarg value="-Xmx1g"/> 
			
			<classpath>
				<fileset dir="lib">
					<include name="**/*.jar" />
				</fileset>
				<pathelement location="${core.classes}"/>
				<pathelement location="${jung.classes}"/>
				<pathelement location="${blueprints.classes}"/>
				<pathelement location="${tests.classes}"/>
			</classpath>
			
			<formatter type="xml" />
			
			<test todir="${junitreports}" name="test.nz.ac.massey.cs.guery.suite1.IOTests" />
			<test todir="${junitreports}" name="test.nz.ac.massey.cs.guery.suite1.QueryTestsXML" />
			<test todir="${junitreports}" name="test.nz.ac.massey.cs.guery.suite1.QueryTestsDSL" />
			<test todir="${junitreports}" name="test.nz.ac.massey.cs.guery.suite1.XMLSchemaValidationTests" />
			<test todir="${junitreports}" name="test.nz.ac.massey.cs.guery.ccc.TestSimpleGraphs" />
			<test todir="${junitreports}" name="test.nz.ac.massey.cs.guery.ccc.TestLog4JUsingChainCompressionCache" />
			<test todir="${junitreports}" name="test.nz.ac.massey.cs.guery.ccc.TestAzureusUsingChainCompressionCache" />
			<test todir="${junitreports}" name="test.nz.ac.massey.cs.guery.softwareantipatterns.TestGQLEngineAndPathFinderConsistency" />
			<test todir="${junitreports}" name="test.nz.ac.massey.cs.guery.softwareantipatterns.TestLog4J" />
			<test todir="${junitreports}" name="test.nz.ac.massey.cs.guery.scc.TestSCCMetrics" />	
			<test todir="${junitreports}" name="test.nz.ac.massey.cs.guery.adapters.blueprints.BlueprintsAdapterTests" />
		</junit>
		
		<!-- report -->
		<!-- disable for now: there are compatibility problems btwn the xslt and xalan in diff jdk versions 
		<junitreport todir="${junitreports}">
			<fileset dir="${junitreports}">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="frames" todir="${junitreports}" />
		</junitreport>
		-->

	</target>


	<!-- build the jars -->
	<!-- <target name="jar" depends="tests" description="Creates the jar file"> -->
	<target name="jar" depends="compile" description="Creates the jar file">
		<tstamp>
			<format property="today" pattern="ddMMyyhhmm" />
		</tstamp>

		<!-- api -->
		<filter token="TITLE" value="${name} API " />
		<filter token="VERSION" value="${version}" />
		<filter token="VENDOR" value="Jens Dietrich, Massey University" />
		<delete file="${tmp}/manifest.mf" />
		<copy file="${config}/${name}.mf" tofile="${tmp}/manifest.mf" filtering="yes" />
		<jar jarfile="${api.jar}.jar" manifest="${tmp}/manifest.mf" basedir="${core.classes}" includes="nz/**/*.*" excludes="test/**/*.*,nz/**/io/**/*.*,nz/ac/massey/cs/guery/impl/*.*" />
		<delete file="${tmp}/manifest.mf" />
		
		<!-- reference impl -->
		<filter token="TITLE" value="${name} reference implementation" />
		<filter token="VERSION" value="${version}" />
		<filter token="VENDOR" value="Jens Dietrich, Massey University" />
		<delete file="${tmp}/manifest.mf" />
		<copy file="${config}/${name}.mf" tofile="${tmp}/manifest.mf" filtering="yes" />
		<jar jarfile="${impl.jar}.jar" manifest="${tmp}/manifest.mf" basedir="${core.classes}" includes="nz/ac/massey/cs/guery/impl/**/*.*" />
		<delete file="${tmp}/manifest.mf" />
		
		<!-- io -->
		<filter token="TITLE" value="${name} IO" />
		<filter token="VERSION" value="${version}" />
		<filter token="VENDOR" value="Jens Dietrich, Massey University" />
		<delete file="${tmp}/manifest.mf" />
		<copy file="${config}/${name}.mf" tofile="${tmp}/manifest.mf" filtering="yes" />
		<jar jarfile="${io.jar}.jar" manifest="${tmp}/manifest.mf" basedir="${core.classes}" includes="nz/**/io/**/*.*" />
		<delete file="${tmp}/manifest.mf" />
		
		<!-- tests -->
		<delete file="${tmp}/manifest.mf" />
		<filter token="VERSION" value="${version}" />
		<filter token="VENDOR" value="Jens Dietrich, Massey University" />
		<filter token="TITLE" value="${name} JUnit test cases" />
		<copy file="${config}/${name}.mf" tofile="${tmp}/manifest.mf" filtering="yes" />
		<jar jarfile="${tests.jar}.jar" manifest="${tmp}/manifest.mf" basedir="${tests.classes}" />
		<delete file="${tmp}/manifest.mf" />
		
		<!-- jung adapter -->
		<delete file="${tmp}/manifest.mf" />
		<filter token="VERSION" value="${version}" />
		<filter token="VENDOR" value="Jens Dietrich, Massey University" />
		<filter token="TITLE" value="${name} jung adapter and chain compression" />
		<copy file="${config}/${name}.mf" tofile="${tmp}/manifest.mf" filtering="yes" />
		<jar jarfile="${jung.jar}.jar" manifest="${tmp}/manifest.mf" basedir="${jung.classes}" />
		<delete file="${tmp}/manifest.mf" />
		
		<!-- blueprints adapter -->
		<delete file="${tmp}/manifest.mf" />
		<filter token="VERSION" value="${version}" />
		<filter token="VENDOR" value="Jens Dietrich, Massey University" />
		<filter token="TITLE" value="${name} blueprints adapter" />
		<copy file="${config}/${name}.mf" tofile="${tmp}/manifest.mf" filtering="yes" />
		<jar jarfile="${blueprints.jar}.jar" manifest="${tmp}/manifest.mf" basedir="${blueprints.classes}" />
		<delete file="${tmp}/manifest.mf" />
		
		<delete dir="${tmp}" />
	</target>
	
	<!-- build release -->
	<target name="release" depends="test,jar" description="Build release">
		<copy todir="${requiredlibs}">
			<fileset dir="${lib}">
				<include name="**/*.jar" />
			</fileset>
		</copy>
		<zip destfile="${build}/guery-${version}.zip">
			<zipfileset dir="${build.lib}" prefix="lib" />
			<zipfileset dir="${requiredlibs}" prefix="lib-required" />
			<zipfileset dir="${src}" prefix="src" />
			<zipfileset file="license.txt" prefix=""/>
		</zip>
	</target>
	
	<!-- clean up -->
	<target name="clean">
	<delete dir="${build}" />
	</target>

</project>
